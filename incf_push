#!/usr/bin/python

# See file COPYING distributed with the one_click package for the copyright
# and license.

import sys
import os
import tempfile
import shutil
import subprocess
import uuid
import dicom

deident_tags = [(0x0008, 0x0050), # Accession Number
                (0x0008, 0x0080), # InstitutionName
                (0x0008, 0x0090), # Referring Physician's Name
                (0x0008, 0x0096), # Referring Physician Identification
                (0x0008, 0x1048), # Physician(s) of Record
                (0x0008, 0x1049), # Physician(s) of Record Identification
                (0x0008, 0x1050), # Performing Physicians' Name
                (0x0008, 0x1052), # Performing Physician Identification
                (0x0008, 0x1060), # Name of Physician(s) Reading Study
                (0x0008, 0x1062), # Physician(s) Reading Study Identification
                (0x0010, 0x0030), # Patient's Birth Date
                (0x0010, 0x0050), # Patient's Insurance Plan Code SQ
                (0x0010, 0x0101), # Patient's Primary Language Code SQ
                (0x0010, 0x1000), # Other Patient IDs
                (0x0010, 0x1001), # Other Patient Names
                (0x0010, 0x1002), # Other Patient IDs SQ
                (0x0010, 0x1005), # Patient's Birth Name
                (0x0010, 0x1010), # Patient's Age
                (0x0010, 0x1040), # Patient's Address
                (0x0010, 0x1060), # Patient's Mother's Birth Name
               ]

# del dicom_object[(xxxx, yyyy)] doesn't work for me, but 
# del dicom_object[tag] does, where tag = dicom.tag.Tag((xxxx, yyyy))
deident_tags = [ dicom.tag.Tag(tag) for tag in deident_tags ]

def new_uid(old_uid):
    """create a new DICOM UID

    return an already-created UID if the old UID has already been replaced
    """
    if old_uid not in uids:
        uids[old_uid] = '2.25.%d' % uuid.uuid1().int
    return uids[old_uid]

progname = os.path.basename(sys.argv[0])
uids = {}

try:
    subprocess.call(['storescu'], 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE)
except:
    have_storescu = False
else:
    have_storescu = True

if len(sys.argv) != 5:
    print
    print 'Usage: %s <dir> <user> <subject> <session>' % progname
    print
    print 'Push data to the INCF XNAT server'
    print
    print 'dir -- Directory containing DICOM data.  This directory and its '
    print '       subdirectories are recursively searched for data.'
    print
    print 'user -- Your INCF portal (www.incf.org) username.'
    print
    print 'subject -- The subject name as you would like it to appear on '
    print '           the INCF XNAT.'
    print
    print 'session -- The session name as you would like it to appear on '
    print '           the INCF XNAT.  This must be unique across all subjects '
    print '           you send to the server.'
    print
    print 'For more information, please see http://xnat.incf.org/'
    print
    if not have_storescu:
        print 'WARNING: storescu (the program used to send data to the server) '
        print 'was not found on your system.  Please install DCMTK (or adjust '
        print 'your path) before proceeding.'
        print
    sys.exit(1)

if not have_storescu:
    sys.stderr.write("%s: storescu not found in your path\n" % progname)
    sys.stderr.write('please install DCMTK or adjust your path before proceeding\n')
    sys.exit(1)

(dir, user, subject, session) = sys.argv[1:]

staged_files = []

tempdir = tempfile.mkdtemp()
try:
    files = []
    for (dirpath, dirnames, filenames) in os.walk(dir):
        for fname in filenames:
            files.append('%s/%s' % (dirpath, fname))
    i = 0
    for (n_file, fname) in enumerate(files):
        print '%6d/%6d: %s' % (n_file, len(files), fname)
        try:
            do = dicom.read_file(fname)
        except:
            continue
        do.StudyComments = 'incf:%s' % user
        do.PatientsName = subject
        do.PatientID = session
        for name in ('SOPInstanceUID', 
                     'StudyInstanceUID', 
                     'SeriesInstanceUID', 
                     'FrameofReferenceUID'):
            try:
                el = do.data_element(name)
            except KeyError:
                pass
            else:
                if el is not None:
                    do.data_element(name).value = new_uid(el.value)
                for tag in deident_tags:
                    if tag in do:
                        del do[tag]
        out_fname = '%s/%08d' % (tempdir, i)
        i += 1
        dicom.write_file(out_fname, do)
        staged_files.append(out_fname)
    if not staged_files:
        sys.stderr.write('%s: no DICOM files found\n' % progname)
        sys.exit(1)
    base_args = ['storescu', '-v', '-aec', 'XNAT', 'xnat.incf.org', '104']
    while staged_files:
        # make a copy
        args = base_args[:]
        args.extend(staged_files[:1000])
        staged_files = staged_files[1000:]
        subprocess.call(args)
finally:
    shutil.rmtree(tempdir)

sys.exit(0)

# eof
